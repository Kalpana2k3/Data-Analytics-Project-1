--creating table with our data's columns

create table df_orders (
order_id int primary key,
order_date date,
ship_mode varchar(20),
.
.
.
.
sub_category varchar(20),
.
.
.
discount decimal(7,2),
sale_price decimal(7,2),
profit decimal(7,2)
)

select * from df_orders

-- 1.Find top 10 highest revenue generating products
select product_id, sum(sale_price) as sales
from df_orders
group by product_id
order by sales desc
limit 10;


-- 2.Find top 5 highest selling products in each region

with cte as (
   select region, product_id, sum (sale_price) as sales
   from df_orders
   group by region, product_id)
select * from(select * ,
  row_number() over(partition by region order by sales desc)
  from cte) A 
where row_number<=5 
/*row number - creates a new column listing the rows
partition by partitions the row number based on our specification. 
see, if region has (central,east,west..) partition by creates a new row numbers.*/



-- 3.Find month over month growth comparison for 2022 and 2023 sales(jan 2022 vs jan 2023)

select distinct date_part('year',order_date)
from df_orders --checking dstinct years in data
--date_part helps with partitioning.

select 
   date_part('year',order_date) as order_year,
   date_part('month',order_date) as order_month,
   sum(sale_price) as sales
from df_orders
group by order_year, order_month
order by order_month  -- shows row wise.

-- for column wise table,
month /2022/2023
1     /35000/38000

with cte as (
   select 
     date_part('year',order_date) as order_year,
     date_part('month',order_date) as order_month,
     sum(sale_price) as sales
   from df_orders
   group by order_year, order_month
   order by order_month
  )
select 
   order_month,
   sum(case 
	      when order_year=2022 
	      then sales 
	      else 0 
	      end) as sales_2022,
   sum(case 
	      when order_year=2023 
	      then sales 
	      else 0 
	      end) as sales_2023
from cte
group by order_month


-- 4.For each category, which month had highest sales

select 
   category as cats,
   date_part('month',order_date) as order_month,
   sum(sale_price) as sales
from df_orders
group by cats, order_month
order by order_month --shows the total sales of every month for each category.

--To get highest month,
with cte as (
       select 
           category as cats,
           to_char(order_date, 'YYYY-MM') as order_yearmonth,
           sum(sale_price) as sales
       from df_orders
       group by cats, order_yearmonth
       order by order_yearmonth
	)
select * 
from
    (select * ,
     row_number() over(partition by cats order by sales desc)
  from cte) A 
where row_number=1 


-- 5. Which sub category has highest growth by profit in 2023 compared to 2022

with cte as (
   select 
	 sub_category,
     date_part('year',order_date) as order_year,
     sum(sale_price) as sales
   from df_orders
   group by sub_category, order_year
   order by sub_category
  ),
cte2 as (
 select 
   sub_category,
   sum(case 
	      when order_year=2022 
	      then sales 
	      else 0 
	      end) as sales_2022,
   sum(case 
	      when order_year=2023 
	      then sales 
	      else 0 
	      end) as sales_2023
from cte
group by sub_category
	)
select * ,
      (sales_2023 - sales_2022)*100/sales_2022 as growth_percentage
from cte2
order by growth_percentage



-------------------------DONE FOR NOW----------------------------
